/**
 * Setup Default Images Script (TypeScript)
 *
 * This script helps you upload the default images to Cloudinary
 * and update the configuration with the correct URLs.
 *
 * Before running this script:
 * 1. Download the images from Freepik:
 *    - Profile Picture: https://www.freepik.com/free-vector/user-circles-set_145856997.htm
 *    - Background Image: https://www.freepik.com/free-photo/abstract-background-with-smooth-flowing-curves_11247004.htm
 * 2. Save them as 'default-profile-avatar.jpg' and 'default-background.jpg' in the project root
 * 3. Make sure your Cloudinary credentials are set in environment variables
 */

import { v2 as cloudinary } from 'cloudinary';
import * as fs from 'fs';
import * as path from 'path';

// Cloudinary configuration
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_SECRET,
});

interface ImageConfig {
  name: string;
  folder: string;
  publicId: string;
  description: string;
}

interface UploadResult {
  public_id: string;
  url: string;
  width: number;
  height: number;
  format: string;
  size: number;
}

const DEFAULT_IMAGES: ImageConfig[] = [
  {
    name: 'default-profile-avatar.jpg',
    folder: 'defaults',
    publicId: 'default-profile-avatar',
    description: 'Default profile picture avatar',
  },
  {
    name: 'default-background.jpg',
    folder: 'defaults',
    publicId: 'default-background',
    description: 'Default background image',
  },
];

async function uploadDefaultImage(imageConfig: ImageConfig): Promise<UploadResult | null> {
  const filePath = path.join(__dirname, '..', imageConfig.name);

  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  Image file not found: ${filePath}`);
    console.log(
      `   Please download and save the image as: ${imageConfig.name}`,
    );
    return null;
  }

  try {
    console.log(`üì§ Uploading ${imageConfig.name}...`);

    const result = await cloudinary.uploader.upload(filePath, {
      folder: imageConfig.folder,
      public_id: imageConfig.publicId,
      resource_type: 'image',
      transformation: [
        { width: 400, height: 400, crop: 'fill', gravity: 'face' }, // For profile pictures
        { quality: 'auto:good' },
        { fetch_format: 'auto' },
      ],
      tags: ['default', 'user-image'],
    });

    console.log(`‚úÖ ${imageConfig.name} uploaded successfully!`);
    console.log(`   Public ID: ${result.public_id}`);
    console.log(`   URL: ${result.secure_url}`);
    console.log('');

    return {
      public_id: result.public_id,
      url: result.secure_url,
      width: result.width,
      height: result.height,
      format: result.format,
      size: result.bytes,
    };
  } catch (error) {
    console.error(`‚ùå Failed to upload ${imageConfig.name}:`, (error as Error).message);
    return null;
  }
}

async function updateConfigFile(profileImageData: UploadResult | null, backgroundImageData: UploadResult | null): Promise<void> {
  const configPath = path.join(
    __dirname,
    '..',
    'src',
    'core',
    'config',
    'default-images.config.ts',
  );

  if (!profileImageData || !backgroundImageData) {
    console.log('‚ö†Ô∏è  Skipping config update due to upload failures');
    return;
  }

  const configContent = `/**
 * Default Images Configuration
 * 
 * This file contains the default image URLs for users who haven't uploaded
 * their own profile pictures or background images.
 * 
 * Generated by setup-default-images.ts script
 */

export const DEFAULT_IMAGES = {
  // Default profile picture URL
  PROFILE_PICTURE: '${profileImageData.url}',
  
  // Default background image URL  
  BACKGROUND_IMAGE: '${backgroundImageData.url}',
} as const;

/**
 * Helper function to get default image data
 */
export function getDefaultImageData(imageType: 'profilePicture' | 'backgroundImage') {
  const url = imageType === 'profilePicture' 
    ? DEFAULT_IMAGES.PROFILE_PICTURE 
    : DEFAULT_IMAGES.BACKGROUND_IMAGE;
    
  return {
    public_id: imageType === 'profilePicture' ? '${profileImageData.public_id}' : '${backgroundImageData.public_id}',
    url,
    width: ${profileImageData.width},
    height: ${profileImageData.height},
    format: '${profileImageData.format}',
    size: ${profileImageData.size},
    uploadedAt: new Date(),
    isDefault: true, // Flag to identify default images
  };
}

/**
 * Check if an image is a default image
 */
export function isDefaultImage(imageData: any): boolean {
  return imageData?.isDefault === true || imageData?.public_id?.startsWith('default-');
}`;

  try {
    fs.writeFileSync(configPath, configContent);
    console.log('‚úÖ Configuration file updated successfully!');
    console.log(`   File: ${configPath}`);
  } catch (error) {
    console.error('‚ùå Failed to update configuration file:', (error as Error).message);
  }
}

async function main(): Promise<void> {
  console.log('üöÄ Setting up default images for user profiles...\n');

  // Check if required files exist
  const missingFiles = DEFAULT_IMAGES.filter(
    (img) => !fs.existsSync(path.join(__dirname, '..', img.name)),
  );

  if (missingFiles.length > 0) {
    console.log('üìã Required image files:');
    missingFiles.forEach((img) => {
      console.log(`   - ${img.name}`);
    });
    console.log(
      '\nüì• Please download the images from Freepik and save them in the project root:',
    );
    console.log(
      '   Profile Picture: https://www.freepik.com/free-vector/user-circles-set_145856997.htm',
    );
    console.log(
      '   Background Image: https://www.freepik.com/free-photo/abstract-background-with-smooth-flowing-curves_11247004.htm',
    );
    console.log("\nüí° Make sure to comply with Freepik's licensing terms!");
    return;
  }

  // Upload images
  const profileImageData = await uploadDefaultImage(DEFAULT_IMAGES[0]);
  const backgroundImageData = await uploadDefaultImage(DEFAULT_IMAGES[1]);

  // Update configuration file
  await updateConfigFile(profileImageData, backgroundImageData);

  console.log('üéâ Default images setup completed!');
  console.log('\nüìù Next steps:');
  console.log('   1. Restart your application to load the new configuration');
  console.log('   2. Test the image upload functionality');
  console.log('   3. Verify that new users get default images automatically');
}

// Run the script
main().catch((error) => {
  console.error('Script failed:', error);
  process.exit(1);
});

